
//Anik_Modak : Invalid Input

#include<bits/stdc++.h> : Invalid Input

using : identifier

namespace : identifier

std; : Invalid Input

string : identifier

keyword[35] : Invalid Input

= : Arithmetic Operator

{"auto","double","int","struct","break","else","long", : Invalid Input

"switch","case","enum","register","typedef","char", : Invalid Input

"extern","return","union","const","float","short", : Invalid Input

"unsigned","continue","for","signed","void","default", : Invalid Input

"goto","sizeof","voltile","do","if","static","while","bool"}; : Invalid Input

bool : Keyword

isArithmetic( : Invalid Input

string : identifier

ch) : Invalid Input

{ : Invalid Input

if : Keyword

(ch : Invalid Input

== : Relational Operator

"+" : Invalid Input

|| : Relational Operator

ch : identifier

== : Relational Operator

"-" : Invalid Input

|| : Relational Operator

ch : identifier

== : Relational Operator

"*" : Invalid Input

|| : Relational Operator

ch : identifier

== : Relational Operator

"/" : Invalid Input

|| : Relational Operator

ch : identifier

== : Relational Operator

"%" : Invalid Input

|| : Relational Operator

ch : identifier

== : Relational Operator

"=") : Invalid Input

return : Keyword

true : identifier

; : Invalid Input

else : Keyword

return : Keyword

false : identifier

; : Invalid Input

} : Invalid Input

bool : Keyword

isRelational( : Invalid Input

string : identifier

ch) : Invalid Input

{ : Invalid Input

if : Keyword

(ch : Invalid Input

== : Relational Operator

"<" : Invalid Input

|| : Relational Operator

ch : identifier

== : Relational Operator

">" : Invalid Input

|| : Relational Operator

ch : identifier

== : Relational Operator

"!=" : Invalid Input

|| : Relational Operator

ch : identifier

== : Relational Operator

"==" : Invalid Input

|| : Relational Operator

ch : identifier

== : Relational Operator

"<=" : Invalid Input

|| : Relational Operator

ch : identifier

== : Relational Operator

">=" : Invalid Input

|| : Relational Operator

ch : identifier

== : Relational Operator

"||" : Invalid Input

|| : Relational Operator

ch : identifier

== : Relational Operator

"&&") : Invalid Input

return : Keyword

true : identifier

; : Invalid Input

else : Keyword

return : Keyword

false : identifier

; : Invalid Input

} : Invalid Input

bool : Keyword

isIncrement( : Invalid Input

string : identifier

ch) : Invalid Input

{ : Invalid Input

if : Keyword

(ch : Invalid Input

== : Relational Operator

"++" : Invalid Input

|| : Relational Operator

ch : identifier

== : Relational Operator

"--") : Invalid Input

return : Keyword

true : identifier

; : Invalid Input

else : Keyword

return : Keyword

false : identifier

; : Invalid Input

} : Invalid Input

bool : Keyword

isLogical( : Invalid Input

string : identifier

ch) : Invalid Input

{ : Invalid Input

if : Keyword

(ch : Invalid Input

== : Relational Operator

"&&" : Invalid Input

|| : Relational Operator

ch : identifier

== : Relational Operator

"||") : Invalid Input

return : Keyword

true; : Invalid Input

else : Keyword

return : Keyword

false; : Invalid Input

} : Invalid Input

bool : Keyword

identifier(string : Invalid Input

s) : Invalid Input

{ : Invalid Input

if(isalpha(s[0]) : Invalid Input

|| : Relational Operator

s[0]=='_') : Invalid Input

{ : Invalid Input

int : Keyword

cnt : identifier

= : Arithmetic Operator

0, : Invalid Input

len : identifier

= : Arithmetic Operator

s.size(); : Invalid Input

for(int : Invalid Input

i=0; : Invalid Input

i<len; : Invalid Input

i++) : Invalid Input

if(isdigit(s[i]) : Invalid Input

|| : Relational Operator

isalpha(s[i]) : Invalid Input

|| : Relational Operator

s[i]=='_') : Invalid Input

cnt++; : Invalid Input

if(cnt==len) : Invalid Input

return : Keyword

1; : Invalid Input

} : Invalid Input

return : Keyword

0; : Invalid Input

} : Invalid Input

int : Keyword

main() : Invalid Input

{ : Invalid Input

freopen("Experiment8.cpp","r",stdin); : Invalid Input

freopen("output.txt","w",stdout); : Invalid Input

string : identifier

s; : Invalid Input

while : Keyword

(cin>>s) : Invalid Input

{ : Invalid Input

int : Keyword

len : identifier

= : Arithmetic Operator

s.size(); : Invalid Input

cout<<"\n"<<s<<" : Invalid Input

: : Invalid Input

"; : Invalid Input

if(len : Invalid Input

== : Relational Operator

1 : Invalid Input

&& : Relational Operator

isArithmetic(s)) : Invalid Input

cout<<"Arithmetic : Invalid Input

Operator"<<endl; : Invalid Input

else : Keyword

if : Keyword

(isRelational(s)) : Invalid Input

cout<<"Relational : Invalid Input

Operator"<<endl; : Invalid Input

else : Keyword

if : Keyword

(isIncrement(s)) : Invalid Input

cout<<"Increment : Invalid Input

Decrement : identifier

Operator"<<endl; : Invalid Input

else : Keyword

if(isLogical(s)) : Invalid Input

cout<<"Logical : Invalid Input

Operator"<<endl; : Invalid Input

else : Keyword

{ : Invalid Input

int : Keyword

ck : identifier

= : Arithmetic Operator

0; : Invalid Input

for(int : Invalid Input

i : identifier

= : Arithmetic Operator

0; : Invalid Input

i : identifier

< : Relational Operator

34; : Invalid Input

i : identifier

++ : Increment Decrement Operator

) : Invalid Input

{ : Invalid Input

if : Keyword

(s : Invalid Input

== : Relational Operator

keyword[i]) : Invalid Input

ck : identifier

= : Arithmetic Operator

1; : Invalid Input

} : Invalid Input

if : Keyword

(ck : Invalid Input

== : Relational Operator

1) : Invalid Input

cout<<"Keyword"<<endl; : Invalid Input

else : Keyword

if(identifier(s)) : Invalid Input

cout<<"identifier"<<endl; : Invalid Input

else : Keyword

cout<<"Invalid : Invalid Input

Input"<<endl; : Invalid Input

} : Invalid Input

} : Invalid Input

return : Keyword

0; : Invalid Input

} : Invalid Input
